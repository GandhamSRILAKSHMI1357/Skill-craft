{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPNOPt0uIVp5O8Y72tFVeh+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GandhamSRILAKSHMI1357/Skill-craft/blob/main/skill%20craft%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6ahGPZ-hHijq",
        "outputId": "1aaddcb8-2c93-4bcd-f195-9997ce486d5d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Simple Image Encryption Tool ---\n",
            "Warning: This is for educational purposes only and not for secure encryption.\n",
            "\n",
            "Choose an option:\n",
            "1. Encrypt Image\n",
            "2. Decrypt Image\n",
            "3. Exit\n",
            "Enter your choice (1/2/3): 2\n",
            "Enter the path to the encrypted image: decrypted_image.png\n",
            "Enter the output path for the decrypted image (e.g., decrypted_image.png): decrypted_image.png\n",
            "\n",
            "Choose a decryption method (must match encryption method):\n",
            "  a. Swap RGB Channels\n",
            "  b. Add/Subtract Key to Pixel Values\n",
            "Enter method choice (a/b): a\n",
            "Error: Encrypted image not found at decrypted_image.png\n",
            "\n",
            "Choose an option:\n",
            "1. Encrypt Image\n",
            "2. Decrypt Image\n",
            "3. Exit\n",
            "Enter your choice (1/2/3): 2\n",
            "Enter the path to the encrypted image: encrypt image\n",
            "Enter the output path for the decrypted image (e.g., decrypted_image.png): decrypted_image.png\n",
            "\n",
            "Choose a decryption method (must match encryption method):\n",
            "  a. Swap RGB Channels\n",
            "  b. Add/Subtract Key to Pixel Values\n",
            "Enter method choice (a/b): b\n",
            "Enter the same integer key used for encryption (e.g., 50): 50\n",
            "Error: Encrypted image not found at encrypt image\n",
            "\n",
            "Choose an option:\n",
            "1. Encrypt Image\n",
            "2. Decrypt Image\n",
            "3. Exit\n",
            "Enter your choice (1/2/3): 3\n",
            "Exiting tool. Goodbye!\n"
          ]
        }
      ],
      "source": [
        "from PIL import Image\n",
        "import os\n",
        "\n",
        "def encrypt_image(image_path, output_path, method, key=50):\n",
        "    \"\"\"\n",
        "    Encrypts an image using specified pixel manipulation methods.\n",
        "\n",
        "    Args:\n",
        "        image_path (str): Path to the input image.\n",
        "        output_path (str): Path to save the encrypted image.\n",
        "        method (str): Encryption method ('swap_channels' or 'add_subtract').\n",
        "        key (int): An integer key used for 'add_subtract' method (default: 50).\n",
        "    \"\"\"\n",
        "    try:\n",
        "        img = Image.open(image_path)\n",
        "        img = img.convert(\"RGB\")  # Ensure consistent RGB format\n",
        "        width, height = img.size\n",
        "        pixels = img.load()\n",
        "\n",
        "        if method == \"swap_channels\":\n",
        "            for y in range(height):\n",
        "                for x in range(width):\n",
        "                    r, g, b = pixels[x, y]\n",
        "                    # Simple channel swapping: R becomes G, G becomes B, B becomes R\n",
        "                    pixels[x, y] = (g, b, r)\n",
        "        elif method == \"add_subtract\":\n",
        "            for y in range(height):\n",
        "                for x in range(width):\n",
        "                    r, g, b = pixels[x, y]\n",
        "                    # Add key to Red, Subtract key from Green, Add key to Blue\n",
        "                    # Ensure values stay within 0-255 range\n",
        "                    new_r = (r + key) % 256\n",
        "                    new_g = (g - key) % 256\n",
        "                    new_b = (b + key) % 256\n",
        "                    pixels[x, y] = (new_r, new_g, new_b)\n",
        "        else:\n",
        "            print(f\"Error: Unknown encryption method '{method}'.\")\n",
        "            return\n",
        "\n",
        "        img.save(output_path)\n",
        "        print(f\"Image encrypted successfully using '{method}' and saved to {output_path}\")\n",
        "\n",
        "    except FileNotFoundError:\n",
        "        print(f\"Error: Image not found at {image_path}\")\n",
        "    except Exception as e:\n",
        "        print(f\"An error occurred during encryption: {e}\")\n",
        "\n",
        "def decrypt_image(image_path, output_path, method, key=50):\n",
        "    \"\"\"\n",
        "    Decrypts an image using specified pixel manipulation methods (reverses encryption).\n",
        "\n",
        "    Args:\n",
        "        image_path (str): Path to the input encrypted image.\n",
        "        output_path (str): Path to save the decrypted image.\n",
        "        method (str): Decryption method ('swap_channels' or 'add_subtract').\n",
        "        key (int): An integer key used for 'add_subtract' method (default: 50).\n",
        "    \"\"\"\n",
        "    try:\n",
        "        img = Image.open(image_path)\n",
        "        img = img.convert(\"RGB\")\n",
        "        width, height = img.size\n",
        "        pixels = img.load()\n",
        "\n",
        "        if method == \"swap_channels\":\n",
        "            for y in range(height):\n",
        "                for x in range(width):\n",
        "                    r, g, b = pixels[x, y]\n",
        "                    # Reverse channel swapping: G becomes R, B becomes G, R becomes B\n",
        "                    pixels[x, y] = (b, r, g)\n",
        "        elif method == \"add_subtract\":\n",
        "            for y in range(height):\n",
        "                for x in range(width):\n",
        "                    r, g, b = pixels[x, y]\n",
        "                    # Subtract key from Red, Add key to Green, Subtract key from Blue\n",
        "                    # Ensure values stay within 0-255 range\n",
        "                    new_r = (r - key) % 256\n",
        "                    new_g = (g + key) % 256\n",
        "                    new_b = (b - key) % 256\n",
        "                    pixels[x, y] = (new_r, new_g, new_b)\n",
        "        else:\n",
        "            print(f\"Error: Unknown decryption method '{method}'.\")\n",
        "            return\n",
        "\n",
        "        img.save(output_path)\n",
        "        print(f\"Image decrypted successfully using '{method}' and saved to {output_path}\")\n",
        "\n",
        "    except FileNotFoundError:\n",
        "        print(f\"Error: Encrypted image not found at {image_path}\")\n",
        "    except Exception as e:\n",
        "        print(f\"An error occurred during decryption: {e}\")\n",
        "\n",
        "def main():\n",
        "    print(\"--- Simple Image Encryption Tool ---\")\n",
        "    print(\"Warning: This is for educational purposes only and not for secure encryption.\")\n",
        "\n",
        "    while True:\n",
        "        print(\"\\nChoose an option:\")\n",
        "        print(\"1. Encrypt Image\")\n",
        "        print(\"2. Decrypt Image\")\n",
        "        print(\"3. Exit\")\n",
        "\n",
        "        choice = input(\"Enter your choice (1/2/3): \")\n",
        "\n",
        "        if choice == '1':\n",
        "            image_path = input(\"Enter the path to the image to encrypt: \")\n",
        "            output_path = input(\"Enter the output path for the encrypted image (e.g., encrypted_image.png): \")\n",
        "            print(\"\\nChoose an encryption method:\")\n",
        "            print(\"  a. Swap RGB Channels\")\n",
        "            print(\"  b. Add/Subtract Key to Pixel Values\")\n",
        "            method_choice = input(\"Enter method choice (a/b): \").lower()\n",
        "\n",
        "            method = \"\"\n",
        "            key = 50\n",
        "            if method_choice == 'a':\n",
        "                method = \"swap_channels\"\n",
        "            elif method_choice == 'b':\n",
        "                method = \"add_subtract\"\n",
        "                try:\n",
        "                    key = int(input(\"Enter an integer key for encryption (e.g., 50): \"))\n",
        "                except ValueError:\n",
        "                    print(\"Invalid key. Using default key of 50.\")\n",
        "            else:\n",
        "                print(\"Invalid method choice.\")\n",
        "                continue\n",
        "\n",
        "            if method:\n",
        "                encrypt_image(image_path, output_path, method, key)\n",
        "\n",
        "        elif choice == '2':\n",
        "            image_path = input(\"Enter the path to the encrypted image: \")\n",
        "            output_path = input(\"Enter the output path for the decrypted image (e.g., decrypted_image.png): \")\n",
        "            print(\"\\nChoose a decryption method (must match encryption method):\")\n",
        "            print(\"  a. Swap RGB Channels\")\n",
        "            print(\"  b. Add/Subtract Key to Pixel Values\")\n",
        "            method_choice = input(\"Enter method choice (a/b): \").lower()\n",
        "\n",
        "            method = \"\"\n",
        "            key = 50\n",
        "            if method_choice == 'a':\n",
        "                method = \"swap_channels\"\n",
        "            elif method_choice == 'b':\n",
        "                method = \"add_subtract\"\n",
        "                try:\n",
        "                    key = int(input(\"Enter the same integer key used for encryption (e.g., 50): \"))\n",
        "                except ValueError:\n",
        "                    print(\"Invalid key. Using default key of 50.\")\n",
        "            else:\n",
        "                print(\"Invalid method choice.\")\n",
        "                continue\n",
        "\n",
        "            if method:\n",
        "                decrypt_image(image_path, output_path, method, key)\n",
        "\n",
        "        elif choice == '3':\n",
        "            print(\"Exiting tool. Goodbye!\")\n",
        "            break\n",
        "        else:\n",
        "            print(\"Invalid choice. Please enter 1, 2, or 3.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # Ensure Pillow is installed: pip install Pillow\n",
        "    main()"
      ]
    }
  ]
}