{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyOtna2i8+3QkPIWU1RCoQKV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GandhamSRILAKSHMI1357/Skill-craft/blob/main/task%203\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RkTBxsPyBQtS",
        "outputId": "373b12ae-87a6-4b9a-b550-3eeceb1510f0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Assessing password: 'password'\n",
            "  Strength: Weak (Score: 3/9)\n",
            "  Feedback:\n",
            "    ✓ Password is at least 8 characters long.\n",
            "    ✗ Consider adding uppercase letters.\n",
            "    ✓ Contains lowercase letters.\n",
            "    ✗ Consider adding numbers.\n",
            "    ✗ Consider adding special characters (e.g., !@#$%^&*).\n",
            "\n",
            "Assessing password: 'Password123'\n",
            "  Strength: Moderate (Score: 5/9)\n",
            "  Feedback:\n",
            "    ✓ Password is at least 8 characters long.\n",
            "    ✓ Contains uppercase letters.\n",
            "    ✓ Contains lowercase letters.\n",
            "    ✓ Contains numbers.\n",
            "    ✗ Consider adding special characters (e.g., !@#$%^&*).\n",
            "\n",
            "Assessing password: 'MyStrongP@ssw0rd!'\n",
            "  Strength: Very Strong (Score: 8/9)\n",
            "  Feedback:\n",
            "    ✓ Password is at least 8 characters long.\n",
            "    ✓ Contains uppercase letters.\n",
            "    ✓ Contains lowercase letters.\n",
            "    ✓ Contains numbers.\n",
            "    ✓ Contains special characters.\n",
            "    ✓ Excellent mix of character types and length.\n",
            "\n",
            "Assessing password: 'short'\n",
            "  Strength: Weak (Score: 1/9)\n",
            "  Feedback:\n",
            "    ✗ Password should be at least 8 characters long.\n",
            "    ✗ Consider adding uppercase letters.\n",
            "    ✓ Contains lowercase letters.\n",
            "    ✗ Consider adding numbers.\n",
            "    ✗ Consider adding special characters (e.g., !@#$%^&*).\n",
            "\n",
            "Assessing password: 'NoNumbersOrSpecials'\n",
            "  Strength: Moderate (Score: 4/9)\n",
            "  Feedback:\n",
            "    ✓ Password is at least 8 characters long.\n",
            "    ✓ Contains uppercase letters.\n",
            "    ✓ Contains lowercase letters.\n",
            "    ✗ Consider adding numbers.\n",
            "    ✗ Consider adding special characters (e.g., !@#$%^&*).\n",
            "\n",
            "Assessing password: 'P@sswOrd'\n",
            "  Strength: Strong (Score: 6/9)\n",
            "  Feedback:\n",
            "    ✓ Password is at least 8 characters long.\n",
            "    ✓ Contains uppercase letters.\n",
            "    ✓ Contains lowercase letters.\n",
            "    ✗ Consider adding numbers.\n",
            "    ✓ Contains special characters.\n"
          ]
        }
      ],
      "source": [
        "import re\n",
        "\n",
        "def assess_password_strength(password):\n",
        "    \"\"\"\n",
        "    Assesses the strength of a password based on several criteria.\n",
        "\n",
        "    Args:\n",
        "        password (str): The password string to assess.\n",
        "\n",
        "    Returns:\n",
        "        dict: A dictionary containing the strength score and a list of\n",
        "              feedback messages.\n",
        "    \"\"\"\n",
        "    score = 0\n",
        "    feedback = []\n",
        "\n",
        "    # 1. Length\n",
        "    min_length = 8\n",
        "    if len(password) >= min_length:\n",
        "        score += 2\n",
        "        feedback.append(f\"✓ Password is at least {min_length} characters long.\")\n",
        "    else:\n",
        "        feedback.append(f\"✗ Password should be at least {min_length} characters long.\")\n",
        "\n",
        "    # 2. Uppercase letters\n",
        "    if re.search(r\"[A-Z]\", password):\n",
        "        score += 1\n",
        "        feedback.append(\"✓ Contains uppercase letters.\")\n",
        "    else:\n",
        "        feedback.append(\"✗ Consider adding uppercase letters.\")\n",
        "\n",
        "    # 3. Lowercase letters\n",
        "    if re.search(r\"[a-z]\", password):\n",
        "        score += 1\n",
        "        feedback.append(\"✓ Contains lowercase letters.\")\n",
        "    else:\n",
        "        feedback.append(\"✗ Consider adding lowercase letters.\")\n",
        "\n",
        "    # 4. Numbers\n",
        "    if re.search(r\"\\d\", password):\n",
        "        score += 1\n",
        "        feedback.append(\"✓ Contains numbers.\")\n",
        "    else:\n",
        "        feedback.append(\"✗ Consider adding numbers.\")\n",
        "\n",
        "    # 5. Special characters\n",
        "    # Using a common set of special characters. You might want to define\n",
        "    # your own set based on your specific requirements.\n",
        "    special_characters = r\"[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\\\/-]\"\n",
        "    if re.search(special_characters, password):\n",
        "        score += 2  # Give more weight to special characters\n",
        "        feedback.append(\"✓ Contains special characters.\")\n",
        "    else:\n",
        "        feedback.append(\"✗ Consider adding special characters (e.g., !@#$%^&*).\")\n",
        "\n",
        "    # 6. Bonus for mixed characters (optional, but good for strength)\n",
        "    # This is a simple heuristic; more sophisticated checks exist.\n",
        "    criteria_met = sum([\n",
        "        1 if re.search(r\"[A-Z]\", password) else 0,\n",
        "        1 if re.search(r\"[a-z]\", password) else 0,\n",
        "        1 if re.search(r\"\\d\", password) else 0,\n",
        "        1 if re.search(special_characters, password) else 0\n",
        "    ])\n",
        "    if criteria_met >= 3 and len(password) >= 12:\n",
        "        score += 1\n",
        "        feedback.append(\"✓ Excellent mix of character types and length.\")\n",
        "\n",
        "    strength_rating = \"\"\n",
        "    if score >= 8:\n",
        "        strength_rating = \"Very Strong\"\n",
        "    elif score >= 6:\n",
        "        strength_rating = \"Strong\"\n",
        "    elif score >= 4:\n",
        "        strength_rating = \"Moderate\"\n",
        "    else:\n",
        "        strength_rating = \"Weak\"\n",
        "\n",
        "    return {\n",
        "        \"score\": score,\n",
        "        \"strength\": strength_rating,\n",
        "        \"feedback\": feedback\n",
        "    }\n",
        "\n",
        "# --- Example Usage ---\n",
        "if __name__ == \"__main__\":\n",
        "    test_passwords = [\n",
        "        \"password\",\n",
        "        \"Password123\",\n",
        "        \"MyStrongP@ssw0rd!\",\n",
        "        \"short\",\n",
        "        \"NoNumbersOrSpecials\",\n",
        "        \"P@sswOrd\"\n",
        "    ]\n",
        "\n",
        "    for pwd in test_passwords:\n",
        "        print(f\"\\nAssessing password: '{pwd}'\")\n",
        "        result = assess_password_strength(pwd)\n",
        "        print(f\"  Strength: {result['strength']} (Score: {result['score']}/9)\")\n",
        "        print(\"  Feedback:\")\n",
        "        for msg in result['feedback']:\n",
        "            print(f\"    {msg}\")"
      ]
    }
  ]
}